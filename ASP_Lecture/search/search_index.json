{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Scientific Programming - An Introduction","text":"<p>The present lecture notes, heavily under construction,s are on-going notes for a class taught at SJTU for Math undergraduate students.</p>"},{"location":"#what-is-this-lecture-not-about","title":"What is this lecture NOT about","text":"<ul> <li>NOT about computer theory</li> <li>NOT about inner aspects of programming</li> <li>NOT about procedural/functional/OO or whatever programming method</li> <li>NOT about algo/complexity theory</li> </ul>"},{"location":"#who-is-this-lecture-for","title":"Who is this lecture for","text":"<ul> <li>Introdution to programming with emphasis from a mathematical viewpoint and formalism</li> <li>Understanding programming from a fundamental viewpoint rather than technical one (ChatGPT does the technique)</li> <li>Don't need to be a math wizz just basic calculus and algebra are needed</li> <li>Implement scientic computations</li> <li>Handling data in an organized fashion</li> </ul>"},{"location":"#what-to-expect","title":"What to expect","text":"<p>At the end of this lecture you should be able among others to</p> <ul> <li>Implement scientific computations (optimization, integration, dynamical systems, monte carlo, some ML etc.)</li> <li>Organize, clean and query data correctly</li> <li>Debug, optimize your implementations</li> <li>Organize and implement a complex project with the right choice of tools and architecture.</li> </ul>"},{"location":"#python-as-main-programming-language","title":"Python as main programming language","text":"<p>The choive of the programming language for this lecture is Python for the following reasons:</p>"},{"location":"#natural-syntax","title":"Natural Syntax:","text":"<p>Compare C++ <pre><code>#include &lt;iostream.h&gt;\nvoid main()\n{\ncout &lt;&lt; \"Hello world\" &lt;&lt; endl;\n}\n</code></pre> with Python <pre><code>print(\"Hello world\")\n</code></pre></p> <p>As mathematicians it is also one of the languages that is the closest to the mathematical formalism which usually require write less, express more conceptually.</p>"},{"location":"#portable","title":"Portable:","text":"<ul> <li>Python, as R for instance, is a scripting language. You can run pieces of code on the go and see the result. This makes it easy to prototype and test ideas. It has however several drawbacks if not used correctly.</li> <li>Since there is no need to compile the code can be ported on any operating system supporting python (Linux, Mac, Windows, Android, IOS, etc.)</li> </ul>"},{"location":"#versatile","title":"Versatile","text":"<ul> <li>General purpose language (OO or functional programing can be used formally)</li> <li>Application for data analysis and ML but also website, automating tasks, etc.</li> <li>Can interact with other languages relatively easily</li> <li>Good balance between low and high level language</li> </ul>"},{"location":"#huge-community-and-footprint","title":"Huge community and footprint","text":"<ul> <li>Presently among the top 3 most used programming language</li> <li>First language of choice for data analysis, machine learning, AI</li> <li> <p>Immense, well maintained and open sourced major libraries to name but a few:</p> <ul> <li><code>numpy</code>, <code>pyarrow</code>, <code>pandas</code> for multidimensional arrays and tabular data</li> <li><code>scipy</code>, <code>statsmodels</code>, <code>nlop</code> for scientific computing</li> <li><code>pytorch</code>, <code>tensorflow</code>, <code>scikitlearn</code> for machine learning and AI</li> <li><code>matplotlib</code>, <code>seaborn</code>, <code>plotly</code> for data visualization</li> </ul> </li> <li> <p>Most active language on Github (Matlab is nowhere in the top 20...)</p> </li> </ul>"},{"location":"#requirements-from-the-job-market","title":"Requirements from the job market","text":"<p>Familiarity with python and the related data anlysis libraries is now required for most jobs</p> <ul> <li>Financial industry, CS, data analysis companies, etc.</li> <li>Automation tasks, web.</li> <li>As a basic command of excel was required several years ago, now it is Python.</li> </ul>"},{"location":"#open-source","title":"OPEN SOURCE","text":"<p>Python has been created as a programming language by Guido van Rossum who released the program language and maintained it for over 30 years as an open source language.</p> <p></p> <p>Open source ecosystem allowed to have large communities working across the world to develop the ecosystem. Furthermore, it is an essential auditing process so as to see if the language does what it shall.</p>"},{"location":"material/","title":"Material","text":"<p>Any normal computer with either Linux, Windows of MacOS will do it.</p> <p>What is primarily needed:</p> <ul> <li>Python</li> <li>A Code editor</li> </ul>"},{"location":"material/#python","title":"Python","text":"<p>Python can be installed in many different ways (In linux it is for instance most of the time already in the system). Several python (with different versions) can run under the same computer.</p> <p>However the most simple and best advice is to use Anaconda</p> <ol> <li>Step 1: Download Anaconda for your platform</li> <li>Step 2: Install on your computer</li> </ol> Miniconda <p>Anaconda comes with a GUI software to manage the environment and packages with point and click. It also installs a default set of packages such as <code>Jupyther</code>, <code>numpy</code>, etc. If you prefer to install a minimal version and install only the packages you need one after the other you can install Miniconda</p> <p>Anaconda usually comes with a python interpreter called <code>ipython</code> that allows to run code directly from a console or an editor.</p>"},{"location":"material/#code-editor","title":"Code Editor","text":"<p>Two write code you only need an editor, however dedicated editors allows you to program more efficiently.</p> <ul> <li>Jupyther Notebook:     Allows you to run on the browser so called notebook where you can input code, text, and run each cell.     Good for pure beginner.</li> <li>VSCode:     Is a multi platform open source editor maintained and released by Microsoft.     It is a great environment for development.     The principle is that it is a basic editor in which you can install so called plugins (mini apps like in wechat or allipay).     Download and install.     Then go to the plugins repository and install the <code>python</code> plugin from Microsoft.</li> </ul> <p>Good practice</p> <p>It is recommended to have a directory in your computer containing your code files (for organization purposes and also because python will run as environment in this directory).</p>"},{"location":"material/#installing-additional-libraries","title":"Installing additional libraries","text":"<p>Python can be extended with libraries this is one of the strength of it that will perform tasks for you. Installing a new library can be done in three ways with anaconda:</p> <ol> <li>Use the GUI and search for the library</li> <li>Open a terminal and type <code>conda install &lt;library&gt;</code></li> <li>Open a terminal and use pip with <code>pip install &lt;library&gt;</code></li> </ol> <p>Warning</p> <p>The first and second options are preferable usually. Indeed, libraries have a complex system of inter-dependence and since you are likely using Anaconda, the tool <code>conda</code> will manage the inter-dependence of each packages better. It is however slower.</p>"},{"location":"material/#which-libraries","title":"Which libraries","text":"<p>In the lecture we will use quite a lot of libraries and install them on the go. Fundamentally the following ones will be recurrent</p> <ul> <li><code>numpy</code>: multidimensional array library</li> <li><code>pandas</code>: data analysis (tabular) framework </li> <li><code>scipy</code>: scientific library</li> <li><code>pytorch</code>: AI and ML library with tensors</li> <li><code>plotly</code>: Data visualization</li> </ul>"},{"location":"lecture/00-introduction/","title":"Introduction","text":""},{"location":"lecture/00-introduction/#about-computing-something","title":"About Computing Something","text":"<p>When we speak about programming language, scientific computing, from a simplistic viewpoint we want to give a meaning to \\(x \\mapsto f(x)\\). In other terms, given an input \\(x\\) we want to transform this input into and output \\(f(x)\\).</p> Examples: <ul> <li> <p>A constant function \\(f\\) printing <code>Hello World</code>: </p> \\[x \\mapsto \\text{``Hello World!''}\\] </li> <li> <p>A function computing the exponential of \\(x\\):</p> \\[x \\mapsto e^x\\] </li> <li> <p>etc.</p> </li> </ul> <p>Defining, using, composing functions is a natural thing for mathematicians. The question is however whether it is possible to design a machine that will accomplish this task. The idea of such a machine dates backs centuries ago, basically machine that are designed to perform basic arithmetic such as finger counting. They were of mechanical nature such as abacus, suanpan (), Pascaline or various compass and astronomical devices.</p> <p>Many evolutions happened during the 19th and beginning of 20th century of mechanical nature, but the first real modern version of a computer how we know them was done by Suze around 1939-40 where he designed a computer using electric signals (with vaccum tubes) rapidly followed by the works of Turing or von Neumann. This period coincide with an intense work in the mathematical community about the foundations of mathematics.</p> <p>Without entering into the history of computers and their inner functioning, let us notice the following. For mathematics one starts with logic, axiomatic set theory, then build up natural numbers \\(\\mathbb{N}\\), rational numbers \\(\\mathbb{Q}\\), real numbers \\(\\mathbb{R}\\), vector spaces, manifolds, etc. and functions on each of these spaces.</p> <p>If one wants to perform computations in a mathematical sense, one would need those elements. Starting with a simple two elements logical Boolean Algebra <code>{True, False}</code>, it holds </p> <ul> <li>Or: <code>True or True = True</code>, <code>True or False = True</code>, <code>False or False = False</code></li> <li>And: <code>True and True = True</code>, <code>True and False = False</code>, <code>False and False = False</code></li> <li>Negation: <code>~True = False</code>, <code>~False = True</code></li> </ul> <p>Boolean algebra or set theoretical viewpoint</p> <p>This can be written in terms of</p> <ul> <li>\\(X = \\{0,1\\}\\) boolean algebra as \\(1 + 1 = 1\\) where \\(1\\) stands for <code>True</code> and \\(+\\) for <code>or</code>. Same for \\(0\\) standing for <code>False</code>, \\(*\\) for <code>and</code>.</li> <li>\\(X = 2^{\\emptyset}=\\{\\emptyset, \\{\\emptyset\\}\\}\\) as \\(\\{\\emptyset\\}\\cup \\{\\emptyset\\} = \\{\\emptyset\\}\\) where \\(\\{\\emptyset\\}\\) stands for <code>1</code> and \\(\\cup\\) for <code>or</code>i. Similarly \\(\\emptyset\\) stands for \\(0\\), \\(\\cap\\) stands for <code>and</code> and the complement \\({}^c\\) stands for <code>~</code>.</li> </ul> <p>Starting with these premises, following John von Neumann method, one can within ZF theory construct natural numbers, and from there integers, rational numbers etc. At least building a finite arithmetic.</p> <p>Hence for a computer to work, one needs in the first place</p> <ol> <li>A \\(0\\) and \\(1\\) (or <code>False/True</code> states)</li> <li>The operations <code>or</code>, <code>and</code> and <code>~</code></li> <li>A way to read the input and output of those operations (challenge in quantum computing for instance which is slightly different)</li> </ol> <p>As for the \\(0\\), \\(1\\), the invention of electricity allows to produce and measure presence of current (or absence thereof). As for the operations, they are generated by the invention of so transistors that can generate gates performing those operations.</p> <p>The first attempts tried to get working into a decimal world, however it turns out that from this setting working in base 2 is more efficient and closer to what the circuitry allows, and since mathematically it does not matter what base is used, binary it be.</p>"},{"location":"lecture/00-introduction/#talking-to-a-machine","title":"Talking to a Machine","text":"<p>The machine can now deal with finite arithmetic, in other terms, we can do simple \\(x \\mapsto f(x)\\). However, it remains complicated to explain this machine</p> <ul> <li>what \\(x\\) (the input) is. (Convert into binary sequence)</li> <li>how it shall transform \\(x\\) into \\(f(x)\\) with such basic operations</li> <li>how to read out the output (for instance from binary to decimal and print it on a screen or record it somewhere)</li> </ul> <p>This is where programming languages come into place. Like any language, they are characterized by a syntax (form) and semantics (meaning). One receiving end is the computer with a very rudimentary form (made of 0/1 and operations on it), while the other is a human with sophisticated one. Hence programming languages are often classified from low level (close to the machine language) to high level (close to human language). Here is a personal ranking of programing languages along this dimension</p> <ul> <li> <p>(Extremely) Low level:     Those languages are the closest to the machine code instructions.     They are extremely efficient as there is no overhead between the instructions and the computer.     However, beyond simple but critical operations, it is virtually impossible to express more complex framework in reasonable amount of time.     Classical example of which is the assembly language.     Current applications are rare but very specific (flight instruments, rockets, cryptography, special algorithm).     Example of assembly language<pre><code>Example:  M  ADD  R1, ='3'\nwhere, M - Label; ADD - symbolic opcode; \nR1 - symbolic register operand; (='3') - Literal\n\nAssembly Program:\nLabel  Op-code   operand   LC value(Location counter)\nJOHN   START     200\n       MOVER     R1, ='3'    200\n       MOVEM     R1, X       201\nL1     MOVER     R2, ='2'    202\n       LTORG                 203\nX      DS        1           204\n       END                   205\n</code></pre></p> </li> <li> <p>Low level:      Those programming languages are also of procedural nature but with a more natural syntax and semantic with advanced multipurpose functionalities (control flows, recursion, functions, or advanced data structure).     They remain close enough to the machine to be very efficient and do not allow for higher level concepts (templating, objects, etc) and require care how to handle memory.     Typical examples are <code>FORTRAN</code>, <code>C</code> or more recently <code>Rust</code>, <code>CUDA</code>.     They are still very widely used as they are the backbones of many infrastructures and operating system (Linux for instance) as well as scientific libraries.</p> FortranCRust <pre><code>program fibonacci\n    implicit none\n    integer :: n, i\n    integer, allocatable :: fib(:)\n\n    print *, 'Enter the number of terms:'\n    read *, n\n\n    allocate(fib(n))\n\n    fib(1) = 0\n    if (n &gt; 1) fib(2) = 1\n\n    do i = 3, n\n        fib(i) = fib(i-1) + fib(i-2)\n    end do\n\n    print *, 'Fibonacci sequence:'\n    do i = 1, n\n        print *, fib(i)\n    end do\n\n    deallocate(fib)\nend program fibonacci\n</code></pre> <pre><code>#include &lt;stdio.h&gt;\n\nvoid fibonacci(int n) {\n    int t1 = 0, t2 = 1, nextTerm;\n\n    for (int i = 1; i &lt;= n; ++i) {\n        printf(\"%d, \", t1);\n        nextTerm = t1 + t2;\n        t1 = t2;\n        t2 = nextTerm;\n    }\n}\n\nint main() {\n    int n;\n    printf(\"Enter the number of terms: \");\n    scanf(\"%d\", &amp;n);\n    printf(\"Fibonacci Sequence: \");\n    fibonacci(n);\n    return 0;\n}\n</code></pre> <pre><code>fn fibonacci(n: u32) -&gt; u32 {\n    let (mut a, mut b) = (0, 1);\n    for _ in 0..n {\n        let temp = a;\n        a = b;\n        b = temp + b;\n    }\n    a\n}\n\nfn main() {\n    let n = 10; // Example: first 10 Fibonacci numbers\n    for i in 0..n {\n        println!(\"{}\", fibonacci(i));\n    }\n}\n</code></pre> <ul> <li>Medium level:  With more complex needs and larger projects, languages have been extended in terms of functionalities such as memory managment, object oriented or functional programing. On the one hand, they often remove many difficulties related to lower level languages such as addressing and managing the memory, implement asynchronous or parallel programing, and make use of objects or more general structures. They are tons of such languages with each its own philosohy, most wiedely known are <code>C++</code>, <code>Java</code>, <code>Haskell</code> (functional programming language), <code>JavaScript</code> (web oriented), etc. They are still very efficient and used in infrastructure or many web related applications.</li> </ul> C++JavaHaskell <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nclass Circle {\npublic:\n    Circle(double radius) : radius(radius) {}  // Constructor\n\n    double area() const {\n        return radius * radius * 3.14159;\n    }\n\nprivate:\n    double radius;\n};\n\nint main() {\n    Circle circle(5.0);  // Create a Circle object\n    cout &lt;&lt; \"Area of the circle: \" &lt;&lt; circle.area() &lt;&lt; endl;\n    return 0;\n}\n</code></pre> <pre><code>public class Circle {\n    private double radius;\n\n    public Circle(double radius) {\n        this.radius = radius;\n    }\n\n    public double area() {\n        return radius * radius * Math.PI;\n    }\n\n    public static void main(String[] args) {\n        Circle circle = new Circle(5.0);\n        System.out.println(\"Area of the circle: \" + circle.area());\n    }\n}\n</code></pre> <pre><code>data Circle = Circle Double  -- Circle type with a single constructor\n\narea :: Circle -&gt; Double\narea (Circle radius) = pi * radius ^ 2\n\nmain :: IO ()\nmain = print $ area $ Circle 5.0\n</code></pre> <ul> <li>Higher level: Those programing language takes the previous level type but focus on simplifying the syntax and semantics, removing lot of the compilation/debugging work as well as static typing requirements (specifying the neture of all variable before use). They are also by definition very dynamic (objects can be declared at running time) and interpreted (scripting language). Paramount example of which is <code>Python</code> but also <code>Lua</code>, <code>Ruby</code>, etc. They are also programming languages with specific application at hand such as <code>R</code>, <code>Matlab</code>, <code>Mathematica</code>.</li> </ul> PythonRMatlab <pre><code>import numpy as np\n\n# Define an array of numbers\ndata = np.array([1, 2, 3, 4, 5])\n\n# Calculate the mean and standard deviation\nmean = np.mean(data)\nstd_dev = np.std(data)\n\nprint(\"Mean:\", mean)\nprint(\"Standard Deviation:\", std_dev)\n</code></pre> <pre><code># Define a vector of numbers\ndata &lt;- c(1, 2, 3, 4, 5)\n\n# Calculate the mean and standard deviation\nmean &lt;- mean(data)\nstd_dev &lt;- sd(data)\n\nprint(paste(\"Mean:\", mean))\nprint(paste(\"Standard Deviation:\", std_dev))\n</code></pre> <pre><code>% Define an array of numbers\ndata = [1, 2, 3, 4, 5];\n\n% Calculate the mean and standard deviation\nmean_val = mean(data);\nstd_dev = std(data);\n\ndisp(['Mean: ', num2str(mean_val)])\ndisp(['Standard Deviation: ', num2str(std_dev)])\n</code></pre> <ul> <li>**(Extremely) high level: <code>ChatGPT</code>. This is not really a programming language but as a large langage model it can perform the task of converting natural langage into code. More advanced models such as google code are trained to design algorithm that are more efficient than those written by human beings. </li> </ul> </li> </ul> <p>As you can see, <code>ChatGPT</code> or more generally those LLM are game changer on how we approach programming languages.  So why shall we learn how to program? In the end it is not necessary anymore to have a large proficiency in low or middle level programming languages. However, it is important to understand how a machine is generating output, how to design programs and then ask any AI to help you along the way. </p>"},{"location":"lecture/01-first-steps/","title":"Basic Operations, Data Types","text":"<p>We start with the most simple example, namely a constant function that will print a message <pre><code>print(\"Hello world!\")\n</code></pre></p> <p>Note that you can put comments in the code that is ignored by python. These pieces of code to ignore are indicated by <code>#</code> character</p> <p><pre><code># We want to print Hello world\nprint(\"Hello World\")\n# We next print a date\nprint(\"Today is 2024-02-14\")\n</code></pre> As your code will start to get longer and longer it is well advised to comment the most important steps so that you can come back and understand what you do, as well as other people can rapidly follow what you are coding.</p>"},{"location":"lecture/01-first-steps/#variables","title":"Variables","text":"<p>In math, declaring variables is bottom line and done like</p> \\[ \\text{Let }a =\\sqrt{\\pi} \\] <p>In python this is the same way <pre><code>a = 1\nprint(\"The value of a is now:\", a)\n</code></pre></p> <p>Equal is not Equal</p> <p>In math the symbol \\(=\\) has a very special meaning, it is a binary relation which is transitive, symetric and antisymetric. But it is also colloquialy used as definition such as let \\(x = \\sqrt{\\pi}\\). In python <code>=</code> means definition or assignment. It is not a reflexive relation meaning that <code>1 =a</code> (if <code>a</code> was not defined before) will not work. Also <code>a =1</code> and <code>b=2</code>, then <code>a=b</code> is not true mathematically, while in python it just reassign <code>b</code> to <code>a</code>.</p> <p>Variables are mutable, means that another assignation will override it</p> <pre><code>a = 3\nprint(\"Value of a is\", a)\na = 5\nprint(\"The value of a is now\", a)\n</code></pre> <p>Variable can be assigned to other variables. Those assignations are copies and therefore independent objects</p> <pre><code>a = 5\nb = a\nprint(\"The value of a is\", a, \"and the value of b is\", b)\n# If I reassign a it will change a but not b --&gt;\na = 6\nprint(\"The value of a is now\", a, \"and the value of b remains\", b)\n</code></pre>"},{"location":"lecture/01-first-steps/#data-types","title":"Data types","text":"<p>Every programming language distinguishes between the nature of data. The basic datatypes in python are</p> <ul> <li>boolean: either <code>True</code> or <code>False</code></li> <li>integers: elements of \\(\\mathbb{Z}\\)</li> <li>floats: elements of \\(\\mathbb{R}\\)</li> <li>strings: sequence of characters <code>\"Hello this is Samuel\"</code></li> </ul> <p>Warning</p> <p>It is clear from the description of a computer that the range of available numbers is bounded (by memory). In particular integers will only be a bounded subset of \\(\\mathbb{Z}\\). For floats it is even more complicated. Remember that \\(\\mathbb{Q}\\) is constructed from \\(\\mathbb{Z}\\) and \\(\\mathbb{R}\\) is constructed as the quotient of all limits of Cauchy sequences in \\(\\mathbb{Q}\\). Since we only have access to a bounded elements of \\(\\mathbb{Z}\\) we can not even construct full \\(\\mathbb{Q}\\). Furthermore quotient of limits of Cauchy sequences, since those are limit objects, can not be considered on a computer. Hence floats is just a subset of \\(\\mathbb{Q}\\) which is even discrete, meaning that the minimal distance between two floats is strictly positive which is not the case of arbitrary subsets of \\(\\mathbb{Q}\\).</p> <p>At any time, given a variable <code>x</code> you can assess what type python is considering for it by using the function <code>type(x)</code>.</p> <pre><code>my_bollean = False\nmy_integer = 25\nmy_float = 3.1\nmy_string = \"My string\"\n# and you can print them as well as the type\n\nprint(\"my_boolean = \", my_bollean)\nprint(\"my_integer = \", my_integer)\nprint(\"my_float = \", my_float)\nprint(\"my_string =\", my_string)\nprint(\"With types:\", type(my_bollean), type(my_integer), type(my_float), type(my_string))\n</code></pre> <p>Note that some operations propagate accross types. In math, since \\(\\mathbb{Z}\\subseteq \\mathbb{R}\\) as a group, the addition between and integer \\(n \\in \\mathbb{Z}\\) and a real number \\(x \\in \\mathbb{R}\\) is well defined as an element of \\(n+x \\in \\mathbb{R}\\) Python does the same automatically by casting the type in the correct space whenever it is unambiguous. <pre><code>a = 1\nb = 3.2\nprint(a+b)\nprint(type(a), type(b), type(a+b))\n</code></pre></p> Further use <pre><code>print(\"Integer positive negative\")\nprint(1, 2, -3)\nprint(\"of type\")\nprint(type(-3))\nprint(\"Floats with different declarations\")\nprint(1.7, 10e-2, -3.0)\nprint(\"of type\")\nprint(type(1.7))\n</code></pre>"},{"location":"lecture/01-first-steps/#the-special-case-of-strings","title":"The special case of strings","text":"<p>Strings in programming languages are difficult datatypes. Indeed, their length is not exactly defined (from a couple of characters for a name, to a milions of characters for a book). In python, each datatype is a class (we will see that later) hence they have many additional functionalities. This is in particular the case for strings which can be partially declared and formated later.</p>"},{"location":"lecture/01-first-steps/#declaration","title":"Declaration","text":"<p>Strings are declared in several ways</p> <ul> <li>Between single quotes: <code>'my string'</code></li> <li>Between triple single quotes: <code>'''my string'''</code></li> <li>Between double quotes: <code>\"my string\"</code></li> <li>Between triple double quotes: <code>\"\"\"my string\"\"\"</code></li> </ul> <pre><code>string1 = 'Hello'\nstring2 = \"Samuel.\"\nstring3 = \"\"\"Your email address is 'sdrapeau@saif.sjtu.edu.cn'. How are you doing on this \"2024-02-19\"?\"\"\"\nprint(string1, string2, string3)\n</code></pre> Single, double, triple, triple double quotes? What the heck! <p>There is kilometers of documentation and webpage about it, you can have a look. However the basic principle is that if a string contains itself a character like <code>'</code> or <code>\"</code> the declaration becomes ambiguous: <code>'I'm Samuel'</code>, <code>\"Let us meet at the \"Da Pino\" restaurant\"</code>. In this case, those characters conflicting with the declaration of string should be escaped (with another character which again raises the question how to escape and escape character...) For ease of use, the triple (single/double) quotes allow you to define inside quotes as long as they are stricly less than three: <code>'''I'm Samuel'''</code>, <code>\"\"\"Let us meet at the \"Da Pino\" restaurant\"\"\"</code> Rule of thumb:</p> <ul> <li>Use double quotes for simple strings or messages where you know that there won't be double quotes inside</li> <li>if you want to use single quotes, no pb, just follow the same argumentation than for the first point</li> <li>Use double quote for simple <code>f-strings</code> (see after)</li> <li>For large string or complex <code>f-strings</code> or formated strings use triple double quote</li> </ul>"},{"location":"lecture/01-first-steps/#concatenate-strings","title":"Concatenate strings","text":"<p>You can try in python that while <code>1+3.5</code> works as expected, <code>1 + \"Samuel\"</code> will result into an error telling that addition is not well defined between and integer and a string. However, the addition between strings is well defined and result in concatenation.</p> <pre><code>my_name = \"Samuel\"\nfirst_string = \"Hello\"\nlast_string = \"How are you?\"\nconcatenated = first_string + \" \" + my_name + \"! \" + last_string\nprint(concatenated) # will print `Hello Samuel! How are you?`\n</code></pre>"},{"location":"lecture/01-first-steps/#formatted-strings","title":"Formatted strings","text":"<p>Strings in combination with the print statement are extremely useful to track what your program is doing. To handle strings dynamically, python allows to predefined strings that can be later formatted. Mathematically these are function of the kind</p> \\[ f(name, date) = \\text{Hello }\\{name\\}\\text{! Today we are }\\{date\\} \\] <p>which produces</p> \\[ f(\\text{Samuel}, \\text{2024-02-14}) = \\text{Hello Samuel! Today we are 2024-02-14} \\] <p>You can declare strings to be formatted with double quotes, triple single quotes or triple double quotes. It is usually better to use triple double quotes. Place holders for the variables are indicated with curly brakets <code>{&lt;...&gt;}</code> Since strings are class object, you can access to the function format to format it</p> <pre><code># Declare the string to be formated.\n# The place holders and names for each variables are between curly brakets\nto_format_string = \"\"\"\nHello {name}!\nYour birthdate is {birthdate}\nYou are {age} years old.\nYou weight {weight}.\n\"\"\"\n\n# you can pass strings, integers, floats as well as simple operations in the variables.\nfirst_string = to_format_string.format(\n    name = 'Samuel',\n    birthdate = '1977-05-23',\n    age = 46,\n    weight = 60+25\n)\nsecond_string = to_format_string.format(\n    name = 'Irina',\n    birthdate = '1992-09-15',\n    age = 31,\n    weight = 70-15\n)\nprint(first_string)\nprint(second_string)\n</code></pre>"},{"location":"lecture/01-first-steps/#shortcut-f-strings","title":"Shortcut: <code>f-strings</code>","text":"<p>Instead of using a formatted string as above, another way is to use the shortcut of <code>f-strings</code>. The main difference is that the variable inside an <code>f-string</code> must be defined before. The declaration is usually done with a single double quote of a triple double quote if the string might be complex.</p> <pre><code># pre-declare the variables\nname = \"Samuel\"\nage = 36\n# get the formated string without the format function\nmy_string  = f\"Hello {name}, you are {age} years old.\"\nprint(my_string)\n</code></pre>"},{"location":"lecture/01-first-steps/#advanced-formatting","title":"Advanced formatting","text":"<p>Beyond just putting variables at different places, the format functionality allows to provide additional formating, in particular for numbers. This is usually done by adding <code>{&lt;...&gt;:&lt;some format code&gt;}</code>.</p> <pre><code>num1 = 1\nnum2 = 73/7\nnum3 = 0.45622\n\nmy_string = \"\"\"\nWe have:\nAn integer: {number1}\ntwo floats: {number2} and {number3}\n\nI can appy formating with :.xf or :.x% where\n - x represent the number of significant digits\n - f/% represent if float formating or percent formating (will multiply by 100)\n\nFormated Floats (works for int): {number1:.2f} {number2: .4f}\nFormated percent: {number3:.2%} and {number3:.0%}\n\"\"\"\n\nresult = my_string.format(number1 = num1, number2 = num2, number3 = num3)\nprint(result)\n</code></pre>"},{"location":"lecture/01-first-steps/#operators","title":"Operators","text":"<p>Now that we have datatype and can define variable, we must describe the basic operators necessary for manipulating these variables.</p>"},{"location":"lecture/01-first-steps/#arithmetic-operators","title":"Arithmetic operators","text":"<p>The simple Arithmetic operators are just what it means.</p> Symbol Task Performed + Addition - Subtraction / Division * Multiplication % Modulus // Floor division ** To the power of <p>As for the euclidean division, remember that for two integers \\(a\\) and \\(b\\neq 0\\), there exists unique integers \\(m\\) and \\(n\\) such that</p> <ul> <li>\\(a = m  b + n\\)</li> <li>\\(0\\leq n &lt; |b|\\)</li> </ul> <p>In python this euclidean division is performed using the floor division and the mod, that is <code>a = a//b * b + a%b</code></p> <pre><code>a = 5\nb = 3\n\n# in the following f-string the symbol \\t stands for a tab space (usually 4 spaces)\nprint(f\"\"\"\naddition:\\t a+b = {a+b}\nsubstraction:\\t a-b = {a-b}\ndivision:\\t a/b = {a/b}\nmultiplication:\\t a*b = {a * b}\npower:\\t a^b = {a**b}\nmodulus:\\t a mod b = {a%b}\nfloor division:\\t a '//' b = {a//b}\nHence: \\t a//b * b+ a%b = {a//b * b + a%b}\n\"\"\")\n</code></pre>"},{"location":"lecture/01-first-steps/#relational-operators","title":"Relational Operators","text":"<p>The relational operators are binary relations. In math, a binary relation \\(R\\) on some set \\(X\\times Y\\) returns for each tuple \\((x,y)\\) either \\(1\\) (true) or \\(0\\) (false) written as \\(xRy\\).</p> <p>The classical but fundamental operators are as follows</p> Symbol Task Performed == True, if left and right sides are equal != True, if left and right are not equal &lt; Less than &gt; Greater than &lt;= Less than or equal to &gt;= Greater than or equal to <pre><code># define z with equal\nz = 1\n\n# test is z is equal to 1 WITH two consecutive equal ==\nprint(f\"\"\"\nz is equal to 1: {z == 1}\nz is equal to 1: {1 == z} # note that it is as expected symetric\nz is different of 2: {z != 2}\nz is strictly greater than 4: {z &gt; 4}\n\"\"\")\n</code></pre>"},{"location":"lecture/01-first-steps/#bitwise-operators","title":"Bitwise Operators","text":"<p>Bitwize operation are also binary relations related to logic. They are called bitwize since they are defined on the logic Boolean algebra <code>{True, False}</code></p> Symbol Task Performed &amp; Logical And l Logical OR ^ XOR ~ Negate <p>Note that XOR is True only when the left and right are strictly different. However XOR can be derived from elementary operation </p> <p><pre><code>print(f\"\"\"\nTrue or False is: {True | False}\nTrue and False is: {True &amp; False}\nThe negation of True is: {~True}\nTrue xor False (exclusive or): {True ^ False}\nTrue xor True: {True ^ True}\n\"\"\"\n)\n</code></pre> The main use of those bitwize operators is within control flows we will see later in combination with the relational operators <pre><code>a = 1\nb = 2\n\nprint(f\"a is equal to 1 and b is different of 3 is {(a == 1) &amp; (b != 3)}\")\nprint(f\"a is negative and b is different of 3 is {(a &lt;=0) &amp; (b != 3)}\")\n</code></pre></p>"},{"location":"lecture/01-first-steps/#data-structures","title":"Data Structures","text":"<p>Aside basic data types such as int, floats or strings, python allows for more advanced data structures, which can be considered as containers of variables. They come in four forms: tuple, lists, sets, dictionaries. They distinguish themselves by the properties</p> <ul> <li>Mutable: can be modified (append, delete, change value)</li> <li>Ordered: if an inherent order is defined for the objects in the container</li> <li>Duplicates: if elements in the container can have duplicated values.</li> </ul> Tuple Lists Dictionaries Sets Mutable Ordered Duplicate <p>With these properties in mind, the most widely used object remains lists and dictionaries. Tuple are sometimes good as function returns or arguments and sets are used if you want to prevent duplicates and do not care about ordering.</p> <p>We therefore present lists and dictionary thereafter and shortly tuple and sets in the end.</p>"},{"location":"lecture/01-first-steps/#lists","title":"Lists","text":"<p>Lists can be viewed as arrays of variables that can be of mixed type. Those arrays can be expanded or shrunken, modified. They are ordered as the elements are all associated with an index starting from <code>0</code> and ending with <code>N-1</code> where <code>N</code> is the length of the list.</p> <ul> <li>Declare: between squared parenthesis <code>x = [x0, x1, ..., x_{N-1}]</code></li> <li>Properties: function length <code>len(x)</code> returns the length of the list <code>N</code></li> <li>Access: <ul> <li>element <code>x[k]</code> represent the value of the array at the <code>k</code>th. position</li> <li>backward: <code>x[-1]</code> is for <code>x[N-1]</code>, <code>x[-2]</code> is for <code>x[N-2]</code> etc.</li> </ul> </li> <li>Slice: extract sub array:<ul> <li><code>x[start:end]</code> is equal to the array <code>[x[start], x[start+1],..., x[end-1]]</code></li> <li><code>x[:end]</code> is equal to the array <code>[x[0], ..., x[end-1]]</code></li> <li><code>x[start:]</code> is equal to the array <code>[x[start], ..., x[N-1]]</code></li> </ul> </li> </ul> <p>Warning</p> <p>Remember that arrays in python are enumerated starting from <code>0</code> and not <code>1</code> like is usual in math. Hence, the last element of an array is <code>x[N-1]</code> for an array of size <code>N</code></p> <pre><code># declare an empty array\nx = []\nprint(f\"Empty array {x} of length {len(x)} and type {type(x)}\")\n\n# declare a heterogeneous array\nx = ['apple', 'orange', 25, 5.4]\nprint(f\"\"\"\nHetegrogeneous array: {x}\nof length: {len(x)}\nand type {type(x)}\n\"\"\")\n\n# Access values\nprint(f\"\"\"\nFirst element:\\t {x[0]}\nThird element:\\t {x[2]}\nLast element:\\t {x[-1]}\n\"\"\"\n)\n\n# Slice\nprint(f\"\"\"\nSlice from 1 to 3 (exclusive): {x[1:3]}\nSlice from begining to 3 (exclusive): {x[:3]}\nSlice from 2 (inclusive) to end: {x[2:]}\n\"\"\")\n</code></pre> <p>Since lists are mutable, you can </p> <ul> <li>Change values:      <code>x[k] = some_val</code> change the value of the element at the <code>k</code>th position to <code>some_val</code></li> <li>Append values:      <code>x.append(some_val)</code> append <code>some_val</code> at the end of the array.     The new length is modified to <code>N+1</code></li> <li>Insert values:      <code>x.insert(k, some_val)</code> insert <code>some_val</code> at position <code>k</code>.     Each previous value between <code>k</code> and <code>N-1</code> is shifted to positions <code>k+1</code> and <code>N</code> with a new length of <code>N+1</code></li> <li> <p>Remove specific item:      <code>x.remove(some_val)</code> removes <code>some_val</code> from the array if it is present.     If there are multiple instance of which, it will remove the first occurrence.</p> <p>Be careful with this function as the objective is not bijective due to the fact that duplicate values might be in the array. * Remove specific indexed value: <code>x.pop(k)</code> remove the <code>k</code>th element resulting in <code>N-1</code> length array. This is the prefered way as it is explicit. Furthermore, while the function <code>x.pop(k)</code> remove the item it also returns the value. In other term <code>val = x.pop(k)</code> result in <code>x</code> without the <code>k</code>th value and <code>val</code> containing the former value <code>x[k]</code>.</p> </li> </ul> <pre><code>x = ['apple', 'orange', 25, 5.4]\n\n# append the string \"new value\" at the 4th position of the array\nx.append(\"new value\")\nprint(f\"\"\"\nx after appending \"new value\" at the last position:\n{x}\n\"\"\")\n\n# insert an integer 25 at position 1\nx.insert(1, 25)\nprint(f\"\"\"\nx after inserting 25 at position 1:\n{x}\n\"\"\")\n\n# remove the value 25 from the array (be carefull there are two so it removes the first)\nx.remove(25)\nprint(f\"\"\"\nx after removeing (the first occurence of) 25:\n{x}\n\"\"\")\n\n# remove the element at position 1\nval = x.pop(1)\nprint(f\"\"\"\nx after removing the value {val} at position 1:\n{x}\n\"\"\")\n</code></pre> <p>Since list elements can be made of every elements, you can also construct list of lists as well as concatenate them as strings.</p> <pre><code>x = [1, 2]\ny = ['carrot','potato']\nz = [x,y]\nconcat = x+y\nprint(f\"\"\"\nFirst list x:\\t{x}\nSecond list y:\\t{y}\nList of lists [x, y] =\\t{z}\nAccessing the second element of the first list in [x, y]:\\t{z[0][1]}\nConcatenation of lists x + y:\\t{concat}\n\"\"\"\n)\n</code></pre>"},{"location":"lecture/01-first-steps/#dictionaries","title":"Dictionaries","text":"<p>Dictionaries are collections of <code>key/value</code> pairs. Like in a classical dictionary where a specific word is associated to a definition. As words in a classical dictionary, keys are unique, however values can be non unique. It is similar to a list where the integer indices of the list are replaced by unique however arbitrary keys.</p> <ul> <li>Declare: between curly brakets <code>x = {'keys': val1, 'key2' = val2}</code></li> <li>Properties:<ul> <li>function length <code>len(x)</code> returns the length of the dictionary (is however of limited use)</li> <li>function listing keys <code>x.keys()</code> returns the list of the keys.</li> </ul> </li> <li>Access: <ul> <li>element <code>x['key']</code> represent the value of the dictionary for the key <code>key</code></li> </ul> </li> </ul> <pre><code># declare an empty dictionary\nx = {}\nprint(f\"Empty dictionary {x} of length {len(x)} and type {type(x)}\")\n\n# declare a dictionary\nx = {'fruit': 'apple', 'vegetable': 'cucumber'}\nprint(f\"\"\"\nDictionary: {x}\nof length: {len(x)}\nand type {type(x)}\n\"\"\")\n\n# Access values\nprint(f\"\"\"\nValue of key fruit:\\t {x['fruit']}\nValue of key vegetable:\\t {x['vegetable']}\nList of the keys:\\t {x.keys()}\n\"\"\"\n)\n</code></pre> <p>As lists, dictionary are mutable, you can </p> <ul> <li>Change values:      <code>x['key'] = some_val</code> change the value for the key <code>key</code> to <code>some_val</code></li> <li>Add values:      <code>x['new_key'] = val</code> adds a new key (if it does not exists otherwize it overwrites the existing value) with value <code>new_val</code>.</li> <li>Remove specific key/value:     <code>x.pop('key')</code> remove the key value for key <code>key</code>.</li> </ul> <p>Info</p> <p>There are other methods for dictionary such as <code>x.popitem()</code> that removes the last inserted key. Even if in Python a dictionary is considered as not ordered, it keeps internally an order. Therefore in terms of philosophy this method should not be used.</p> <pre><code>x = {'fruit': 'apple', 'vegetable': 'cucumber'}\n\n# change the value 'apple' of key `fruit` to `orange`\nx['fruit'] = orange\nprint(f\"\"\"\nDictionary with new value orange for key fruit: {x}\n\"\"\")\n\n# Add a new item `meat` with value `steak`\nx['meat'] = 'steak'\nprint(f\"\"\"\nx after adding a new key/value pair:\n{x}\n\"\"\")\n\n# remove the key `vegetable` from the dictionary\nval = x.pop['vegetable']\nprint(f\"\"\"\nx after removing the key `vegetable` with value {val}:\n{x}\n\"\"\")\n</code></pre> <p>As lists, the value of every key/value pair in a dictionary can be of every nature. In other terms you can build for instance dictionaries of dictionaries that are quite often used for web development (a form of no-sql structure for data).</p> <pre><code>x = {'fruit': 'apple', 'vegetable': 'cucumber'}\n\n# Adding a subdictionary\nx[\"condiments\"] = {\"salty\": \"salt\", \"sugary\": \"caramel\"}\nprint(f\"\"\"\nWe now have a dictionary with a sub dictionary\n{x}\nThe subdictionarry can be accessed\n{x['condiments']}\nand its elements too\n{x['condiments']['salty']}\n\"\"\"\n)\n</code></pre>"},{"location":"lecture/02-control-flows/","title":"Control Flow Statements","text":"<p>So far we have some basic operation with a computer with data (simple or structured). However, in order to du computations beyond simple arithemtic we need deal with objects such as recursive sequences</p> \\[ \\begin{align} u_0 &amp; = x&amp; \\text{and for }n \\geq 0 &amp; &amp; u_{n+1} &amp;=  \\begin{cases} \\alpha u_n + \\beta &amp; \\text{ if } u_n&gt;0\\\\ -\\alpha u_n -\\beta &amp; \\text{otherwize} \\end{cases} \\end{align} \\] <p>Such a simple construction requires for the computer to master two things</p> <ol> <li>Conditional evaluation (the if section)</li> <li>Induction (go from n to n+1)</li> </ol> <p>From a programming langauge viewpoint these two fundamental flows are implemented in different form but are all present. The two basic ones are</p> <ul> <li><code>if then else</code> Conditional evaluation</li> <li><code>for loops</code> inductions</li> </ul> <p>Several alternative that can be derived from them are * <code>case</code> choice between alternatives * <code>go to</code> (fortran style) allows to jump in the code * <code>while</code> do something while a condition is True * etc.</p> <p>In python we will only concentrate on <code>if then else</code> as well as <code>for loops</code> as they are sufficient to express all conditions. (with exception of while that are some sorm of unbounded inductions but can lead to issues in a bounded environment such as a computer)</p>"},{"location":"lecture/02-control-flows/#if-then-else","title":"If then else","text":"<p>This conditional function allows to evaluate if something is true or false and acts upon it</p> <pre><code>x = 6\nif x &gt; 5:\n    print(f\"{x} is indeed greater than 5, fantastic\")\n\nx = 3\nif x &gt; 5:\n    print('fantastic')  # is not printed since now x&lt;5\nprint(\"this line is executed since it is out of the scope of the if statement\")\n</code></pre> <p>Warning</p> <p>The evaluation is given by <code>if ....:</code> and then the code to implement if <code>True</code> is processed below but with indentation (at least 2 space, usually one tab which is 4 spaces). Normally your code editor register it. It is elegant however prone to errors since the begining and the end of the condition is given by this indentation. Indeed, wether true or false everything after which is not indented will be processed. </p> <p>We can add an alternative execution if the result of the evaluation is <code>False</code> using the keyword <code>else</code>. We can also compose the condition executions. <pre><code>x = 6\nif x != 6:\n    print(f'cool {x} is indeed different of 6')\nelse:\n    print(f'Uncool {x} is equal to 6')\n\n# Combining conditions\nx = -2\nif x &lt; 0:\n    if x &lt; -1:\n        print(\"super cool\")\n    else:\n        print('Also ok')\nelse x &lt; 1:\n    print('cool')\n</code></pre> You can also combine several conditions using the <code>elif</code> statement that will evaluate an alternative statement before going forward <pre><code>x= 5\nif x == 6:\n    print(f\"cool {x} is equal to 6\")\nelif x&lt;6:\n    print(f\"that ok, {x} is still smaller than 6\")\nelse:\n    print(f\"that's not cool {x} is greater than 6\")\nprint(\"The program continues\")\n</code></pre></p> <p>Warning</p> <p>Be aware that this control flow will be executed sequentially. In other terms it evaluate one condition after the other and if one is <code>True</code> it will execute it and jump out of the control flow</p> <pre><code># if x is smaller than 1 you want to print cool\n# if x is smaller than 0 you want to print super cool\n# otherwize this is uncool\n\n# wrong implementation for x = 0.5 where you should print super cool\nx = -1\nif x &lt; 1:\n    print(\"Cool\")\nelif x&lt;0:\n    print(\"Super cool\")\nelse:\n    print(\"not ok it is greater or equal than 1 \")\nprint(\"End of wrong condition flow\")\n# in this conditional sequence the first evaluation is true and executed\n# and then the statement is exited\n\n# The right way to do it is to evaluate from larger to narrower condition\n\nx = -1\nif x &lt; 0:\n    print(\"Super cool\")\nelif x&lt;1:\n    print(\"Cool\")\nelse:\n    print(\"not ok it is greater or equal than 1 \")\nprint(\"End of correct condition flow\")\n</code></pre>"},{"location":"lecture/02-control-flows/#for-loop","title":"For loop","text":"<p>For loops allows to realize induction (at least bounded). The idea is to iterate through numbers and do something. In order to do so, we need to define the object over which we iterate (is called an iterator). In any programming languages you can iterate through a range of integers. In python such an iterator of integers is called a <code>range</code>. With such iterator at hand we can loop through them one element after the other using <code>for n in range(5)</code></p> <pre><code>my_range = range(5) # a range of integers from 0 to 4\nprint(my_range)\n\n# we can now loop through it\nfor n in range(5):\n    print(f\"We are at the stage {n} of the loop\")\n    print(f\"We can conduct operations for instance squaring {n**2}\")\n\nmyrange = range(1,5) # a range of integers from 1 to 4\nprint(my_range)\n</code></pre> <p>In any programming languages, integer iterators are defined and the backbone of computations. However as python is a higher level programming language, iterators can be of higher levels. In particular, lists or dictionaries are iterator (be aware that dictionaries are assumed to be unordered, however have an internal counter about the sequence at which key/values have bee inserted and the iterator will take this order).</p> <pre><code>list_of_lists = [[1, 2, 3],\n                 [4, 5, 6],\n                 [7, 8, 9]]\n\nfor x in list_of_lists:\n    print(f\"Sublist {x}\")\n\n# alternative\nlen(list_of_lists)\nfor i in range(len(list_of_lists)):\n    print(f\"Sublist {list_of_lists[i]}\")\n</code></pre> <p>Remember that for lists and dictionary both are the same with the exception that the index in lists is a key in dictionary. When you enumerate in both of them you can access to the (index or key)/value using a tuple.</p> <ul> <li>Lists: <code>enumerate(x)</code> returns an interator <code>(n, x[n])</code> for  <code>n</code> in <code>range(len(x))</code></li> <li>Dictionary: <code>x.items()</code> returns an iterator <code>(key, val)</code> for each <code>key</code> in <code>x.keys()</code></li> </ul> <pre><code>my_list = ['first val', 3, 5.6]\n\nfor idx, val in enumerate(my_list):\n    print(f\"value {val} of the list at index {idx}\")\n\nmy_dict = {'fruit': \"apple\", 'vegetable': 'cucumber'}\n\nfor key, val in my_dict.items():\n    print(f\"Value {val} of the dictionary for the key {key}\")\n</code></pre>"},{"location":"lecture/02-control-flows/#example-the-fibonacci-numbers","title":"Example, the Fibonacci Numbers","text":"<p>The Fibonacci sequence, is a recursive sequence of depth two.</p> <p>Given start values \\(a\\) and \\(b\\), the sequence \\(u_0,u_1,\\ldots, u_n,\\ldots\\) is defined as</p> \\[ \\begin{equation}   u_{n+2}=u_{n+1}+u_n \\quad \\text{for }n\\geq 0 \\end{equation} \\] <p>with start values \\(u_0=a\\) and \\(u_1=b\\).</p> <p>We compute and print the ten first fibonacci numbers</p> <pre><code>a = 1\nb = 2\n\nfor n in range(1,10):\n    # temporary store the value of u_{n+1} into c\n    c = b\n    # assign u_n + u{n+1} into b\n    b = a + b\n    # assign the value u_{n+1} into b\n    a = c\n    # after these operations, given a = u_n and b = u_{n+1}\n    # you shift a = u_{n+1} and b = u_n + u_{n+1} = u_{n+2}\n    print(f\"The {n}th Fibonacci number if {a}\")\n\n# more elegant implementation using the fact that you can allocate tuples\na = 1\nb = 2\nfor n in range(1,10):\n    a, b = b, a+b\n    print(f\"The {n}th Fibonacci number if {a}\")\n</code></pre>"},{"location":"lecture/02-control-flows/#assignment-by-loops","title":"Assignment by loops","text":"<p>Python has a very handy way to build up objects with <code>in line</code> loops. This is handy but can not be extended to complex construction.</p> <p>Suppose that we want to plot at some point the function \\(x \\mapsto f(x) = x^2\\). In order to do so, you need the graph, that is a list a values of \\(x\\) in a given range as well as a list of corresponding values of \\(x^2\\).</p> <pre><code># construct a list of equidistant 11 values of x between 0 and 1 iterating over some range\nx_axis = [x /10 for x in range(11)]\n# get the square of them by iterating over x_axis\ny_axis = [x**2 for x in x_axis]\n\nprint(f\"\"\"\nThe x axis values are:\\t{x}\nThe y axis values are:\\t{y} \n\"\"\")\n</code></pre>"},{"location":"lecture/03-functions-classes/","title":"Function and Classes","text":"<p>Remember that from the very beginning, from a mathematical viewpoint, we want to implement the following</p> \\[ \\begin{equation}  x \\longmapsto f(x) \\end{equation} \\] <p>In other terms we want to compute the value of a function. Given an input \\(x\\), transform it to get an output \\(f(x)\\).</p> <p>Such a shorthand writing is colloquial in mathematics however is not correct. To define a function you write the following </p> \\[ \\begin{equation} \\begin{split} f \\colon X  &amp; \\longrightarrow Y\\\\ x &amp; \\longmapsto f(x) \\end{split} \\end{equation} \\] For the mathematicians among you <p>Mathematically, a function is defined as a graph \\(\\mathrm{Graph}(f) \\subseteq X\\times Y\\) with the property that for any \\(x\\) in \\(X\\), there exists a unique \\(y\\) in \\(Y\\) such that \\((x, y)\\) is in \\(\\mathrm{Graph}(f)\\). Aside from this definition, it means that a function is well defined given a domain \\(X\\) and an image \\(Y\\).</p> <p>Functions are fundamental objects in mathematics in particular in terms of composition. Indeed given functions</p> \\[ \\begin{equation} X \\xrightarrow{f} Y \\xrightarrow{g} Z \\end{equation} \\] <p>We can consider the function \\(f\\circ g\\) given by</p> \\[ \\begin{equation*}     \\begin{split}         g\\circ f \\colon X &amp;  \\longrightarrow Z\\\\         x &amp; \\longmapsto g\\circ f (x) = g\\left(f\\left(x\\right)\\right)      \\end{split} \\end{equation*} \\] <p>Starting from this we can consider more complex structures such as</p> \\[ \\begin{align*}     f \\colon X \\times Y &amp; \\longrightarrow Z &amp; g \\colon I &amp; \\longrightarrow Y\\\\                 (x, y) &amp; \\longmapsto f(x, y) &amp; i &amp; \\longmapsto g(i) \\end{align*} \\] <p>then you can construct the following composition</p> \\[ \\begin{equation*}     \\begin{split}         h\\colon X \\times I &amp; \\longrightarrow Z\\\\                 (x, i) &amp; \\longmapsto h(x, i) = f(x, g(i))     \\end{split} \\end{equation*} \\] <p>It turns out that in programming definition and composition of functions is the fundamental backbone to get results.</p> <p>In math we still use shorthand writting whenever it is clear from the context hwat is meant. suppose you write a paper in number theory and write \"Let \\(f(n) := 2n +1\\)\" it is clear that you consider as domain \\(\\mathbb{N}\\) and image \\(\\mathbb{N}\\). It is elegant and for the reader there is no ambiguity. However a computer is a dumb machine for which you should exactly tell what is what.</p> <p>Hence, domain \\(X\\), image \\(Y\\) and the action itself \\(f\\) are requirements for a well defined function. For ease of notations, it turns out that python adopts from the beginning the shorthand writing exposed above. In other terms you don't need to specify the domain and image of a function explicitly. The compiler will figure out by itself according to the nature of the input</p> <ol> <li>are the inputs valid?</li> <li>can the inputs be processed through the function?</li> <li>the type of the output?</li> </ol> <p>This is a daunting task to ask for a machine and in particular from this viewpoint Python is considered as a high level programming language.  It has smart way to check for any step above, however, it is at the cost of efficiency.</p> Example If you define <code>x=1</code> and <code>y=3.5</code>, then <code>x</code> is of integer type while <code>y</code> is of float type. Nevertheless you can define <code>x+y</code> which is equal to <code>4.5</code> which is natural, however combines a priori in an operation elements from different domains, and the result is a float. Yet, if you define <code>y = \"hello\"</code> to be a string, <code>x+y</code> is going to be an error as there is no way to infer for the compiler how to sum an integer with a string."},{"location":"lecture/03-functions-classes/#function","title":"Function","text":"<p>A function in a programming language is exactly the same as in math, it takes and input and return an output. A function is define using <code>def f(x):</code> where <code>def</code> is a keyword indicating that we define a function, <code>f</code> is the name of the function and <code>x</code> are the variables or input to be considered for this function. After definition of the function you can always call it with <code>f(x)</code> for a specific value of <code>x</code>.</p> <p>The most basic function (I won't speak about empty functions) is the constant function. Constant function takes no input and return the same output anytime. Since python do not need to specify domain and image it is just a universal function so to say.</p> <p><pre><code># A constant function that just print a message\ndef hello():\n    print(\"Hello World!\")\n\n# we now call the function\nhello()\n</code></pre> Constant functions are called <code>void</code> function in programming language however it might confusing sometimes as in python they can act of variables declared outside the scope of the function. <pre><code>x = 1\n# function with no input\ndef hello():\n    print(\"Hello World!\")\n    # add one to x\n    x = x + 1\nprint(f\"Value of x before calling the function {x}\")\n# call the function\nhello()\nprint(f\"Value of x after calling the function {x}\")\n</code></pre> Most low level programming languages do not allow you to use variables outside the scope and the input, this is however not the case for python, hence care here!</p> <p>If the function takes an input it is declared in the function definition and it can be used in the scope of the function.</p> <pre><code>def hello_user(username):\n    print(f\"Hey {username}!\")\n    print(f\"{username}, How do you do?\")\n\nhello_user(\"Samuel\")\nhello_user(\"Linda\")\n</code></pre> <p>However the most interesting functions are those that return an output rather than print something. In order to return a value, the function must be ended with the keyword <code>return</code>. In this case, you can also use composition</p> <pre><code>def multiply(x, y):\n    c = x*y\n    return c\n\nresult = multiply(7,3)\nprint(result)\n# now we can compose to compute 3 * (2 * 3)\nprint(multiply(3,multiply(2,3)))\n</code></pre> Example Provide a function that returns the <code>n</code>th Fibonacci number <pre><code>def fibbo(a0, b0, n):\n    a = a0\n    b = b0\n    if n == 0:\n        return a\n    else:\n        for i in range(1,n):\n            a, b = b, a+b\n        return b\n\n# return the 10th fibonacci number\nfibbo(10,-5, 10)\n</code></pre> <p>It is possible to pass not only variable to a function but also specify default values. Default values are automatically filled if not provided. Not that defautl values in python must be provided after the non ones.</p> <pre><code># we fix 10 as default for n\ndef fibbo(a0, b0, n = 10):\n    a = a0\n    b = b0\n    if n == 0:\n        return a\n    else:\n        for i in range(1,n):\n            a, b = b, a+b\n        return b\n\n# return the 10th fibonacci number we do no longer need to specify 10 for n\nprint(f\"Default fibonnaci number (10): {fibbo(10,-5)}\")\n\n# if we want another number we can specify it\nprint(f\"20th fibonnaci number: {fibbo(10,-5, n=20)}\")\n# it would be here equivalent to call fibbo(10, -5, 20)\n</code></pre>"},{"location":"lecture/03-functions-classes/#classes","title":"Classes","text":""}]}